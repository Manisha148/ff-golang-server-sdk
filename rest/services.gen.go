// Package rest provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package rest

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A callback for modifying requests which are generated before sending over
	// the network.
	RequestEditor RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server url always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = http.DefaultClient
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditor = fn
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Authenticate request  with any body
	AuthenticateWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	Authenticate(ctx context.Context, body AuthenticateJSONRequestBody) (*http.Response, error)

	// GetFeatureConfig request
	GetFeatureConfig(ctx context.Context, environmentUUID string) (*http.Response, error)

	// GetFeatureConfigByIdentifier request
	GetFeatureConfigByIdentifier(ctx context.Context, environmentUUID string, identifier string) (*http.Response, error)

	// GetAllSegments request
	GetAllSegments(ctx context.Context, environmentUUID string) (*http.Response, error)

	// GetEvaluations request
	GetEvaluations(ctx context.Context, environmentUUID string, target string) (*http.Response, error)

	// GetEvaluationByIdentifier request
	GetEvaluationByIdentifier(ctx context.Context, environmentUUID string, target string, feature string) (*http.Response, error)

	// Stream request
	Stream(ctx context.Context, environmentId string) (*http.Response, error)
}

func (c *Client) AuthenticateWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewAuthenticateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) Authenticate(ctx context.Context, body AuthenticateJSONRequestBody) (*http.Response, error) {
	req, err := NewAuthenticateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetFeatureConfig(ctx context.Context, environmentUUID string) (*http.Response, error) {
	req, err := NewGetFeatureConfigRequest(c.Server, environmentUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetFeatureConfigByIdentifier(ctx context.Context, environmentUUID string, identifier string) (*http.Response, error) {
	req, err := NewGetFeatureConfigByIdentifierRequest(c.Server, environmentUUID, identifier)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllSegments(ctx context.Context, environmentUUID string) (*http.Response, error) {
	req, err := NewGetAllSegmentsRequest(c.Server, environmentUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetEvaluations(ctx context.Context, environmentUUID string, target string) (*http.Response, error) {
	req, err := NewGetEvaluationsRequest(c.Server, environmentUUID, target)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetEvaluationByIdentifier(ctx context.Context, environmentUUID string, target string, feature string) (*http.Response, error) {
	req, err := NewGetEvaluationByIdentifierRequest(c.Server, environmentUUID, target, feature)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) Stream(ctx context.Context, environmentId string) (*http.Response, error) {
	req, err := NewStreamRequest(c.Server, environmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// NewAuthenticateRequest calls the generic Authenticate builder with application/json body
func NewAuthenticateRequest(server string, body AuthenticateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthenticateRequestWithBody(server, "application/json", bodyReader)
}

// NewAuthenticateRequestWithBody generates requests for Authenticate with any type of body
func NewAuthenticateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/client/auth")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetFeatureConfigRequest generates requests for GetFeatureConfig
func NewGetFeatureConfigRequest(server string, environmentUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "environmentUUID", environmentUUID)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/client/env/%s/feature-configs", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFeatureConfigByIdentifierRequest generates requests for GetFeatureConfigByIdentifier
func NewGetFeatureConfigByIdentifierRequest(server string, environmentUUID string, identifier string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "environmentUUID", environmentUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "identifier", identifier)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/client/env/%s/feature-configs/%s", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllSegmentsRequest generates requests for GetAllSegments
func NewGetAllSegmentsRequest(server string, environmentUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "environmentUUID", environmentUUID)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/client/env/%s/target-segments", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEvaluationsRequest generates requests for GetEvaluations
func NewGetEvaluationsRequest(server string, environmentUUID string, target string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "environmentUUID", environmentUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "target", target)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/client/env/%s/target/%s/evaluations", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEvaluationByIdentifierRequest generates requests for GetEvaluationByIdentifier
func NewGetEvaluationByIdentifierRequest(server string, environmentUUID string, target string, feature string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "environmentUUID", environmentUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "target", target)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParam("simple", false, "feature", feature)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/client/env/%s/target/%s/evaluations/%s", pathParam0, pathParam1, pathParam2)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStreamRequest generates requests for Stream
func NewStreamRequest(server string, environmentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "environmentId", environmentId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/stream/environments/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// Authenticate request  with any body
	AuthenticateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*AuthenticateResponse, error)

	AuthenticateWithResponse(ctx context.Context, body AuthenticateJSONRequestBody) (*AuthenticateResponse, error)

	// GetFeatureConfig request
	GetFeatureConfigWithResponse(ctx context.Context, environmentUUID string) (*GetFeatureConfigResponse, error)

	// GetFeatureConfigByIdentifier request
	GetFeatureConfigByIdentifierWithResponse(ctx context.Context, environmentUUID string, identifier string) (*GetFeatureConfigByIdentifierResponse, error)

	// GetAllSegments request
	GetAllSegmentsWithResponse(ctx context.Context, environmentUUID string) (*GetAllSegmentsResponse, error)

	// GetEvaluations request
	GetEvaluationsWithResponse(ctx context.Context, environmentUUID string, target string) (*GetEvaluationsResponse, error)

	// GetEvaluationByIdentifier request
	GetEvaluationByIdentifierWithResponse(ctx context.Context, environmentUUID string, target string, feature string) (*GetEvaluationByIdentifierResponse, error)

	// Stream request
	StreamWithResponse(ctx context.Context, environmentId string) (*StreamResponse, error)
}

type AuthenticateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthenticationResponse
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r AuthenticateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthenticateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFeatureConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FeatureConfig
}

// Status returns HTTPResponse.Status
func (r GetFeatureConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFeatureConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFeatureConfigByIdentifierResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FeatureConfig
}

// Status returns HTTPResponse.Status
func (r GetFeatureConfigByIdentifierResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFeatureConfigByIdentifierResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllSegmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Segment
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetAllSegmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllSegmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEvaluationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/Pagination)
		Pagination
		// Embedded struct due to allOf(#/components/schemas/Evaluations)
		Evaluations
	}
}

// Status returns HTTPResponse.Status
func (r GetEvaluationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEvaluationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEvaluationByIdentifierResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Evaluation
}

// Status returns HTTPResponse.Status
func (r GetEvaluationByIdentifierResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEvaluationByIdentifierResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StreamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r StreamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StreamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AuthenticateWithBodyWithResponse request with arbitrary body returning *AuthenticateResponse
func (c *ClientWithResponses) AuthenticateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*AuthenticateResponse, error) {
	rsp, err := c.AuthenticateWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseAuthenticateResponse(rsp)
}

func (c *ClientWithResponses) AuthenticateWithResponse(ctx context.Context, body AuthenticateJSONRequestBody) (*AuthenticateResponse, error) {
	rsp, err := c.Authenticate(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseAuthenticateResponse(rsp)
}

// GetFeatureConfigWithResponse request returning *GetFeatureConfigResponse
func (c *ClientWithResponses) GetFeatureConfigWithResponse(ctx context.Context, environmentUUID string) (*GetFeatureConfigResponse, error) {
	rsp, err := c.GetFeatureConfig(ctx, environmentUUID)
	if err != nil {
		return nil, err
	}
	return ParseGetFeatureConfigResponse(rsp)
}

// GetFeatureConfigByIdentifierWithResponse request returning *GetFeatureConfigByIdentifierResponse
func (c *ClientWithResponses) GetFeatureConfigByIdentifierWithResponse(ctx context.Context, environmentUUID string, identifier string) (*GetFeatureConfigByIdentifierResponse, error) {
	rsp, err := c.GetFeatureConfigByIdentifier(ctx, environmentUUID, identifier)
	if err != nil {
		return nil, err
	}
	return ParseGetFeatureConfigByIdentifierResponse(rsp)
}

// GetAllSegmentsWithResponse request returning *GetAllSegmentsResponse
func (c *ClientWithResponses) GetAllSegmentsWithResponse(ctx context.Context, environmentUUID string) (*GetAllSegmentsResponse, error) {
	rsp, err := c.GetAllSegments(ctx, environmentUUID)
	if err != nil {
		return nil, err
	}
	return ParseGetAllSegmentsResponse(rsp)
}

// GetEvaluationsWithResponse request returning *GetEvaluationsResponse
func (c *ClientWithResponses) GetEvaluationsWithResponse(ctx context.Context, environmentUUID string, target string) (*GetEvaluationsResponse, error) {
	rsp, err := c.GetEvaluations(ctx, environmentUUID, target)
	if err != nil {
		return nil, err
	}
	return ParseGetEvaluationsResponse(rsp)
}

// GetEvaluationByIdentifierWithResponse request returning *GetEvaluationByIdentifierResponse
func (c *ClientWithResponses) GetEvaluationByIdentifierWithResponse(ctx context.Context, environmentUUID string, target string, feature string) (*GetEvaluationByIdentifierResponse, error) {
	rsp, err := c.GetEvaluationByIdentifier(ctx, environmentUUID, target, feature)
	if err != nil {
		return nil, err
	}
	return ParseGetEvaluationByIdentifierResponse(rsp)
}

// StreamWithResponse request returning *StreamResponse
func (c *ClientWithResponses) StreamWithResponse(ctx context.Context, environmentId string) (*StreamResponse, error) {
	rsp, err := c.Stream(ctx, environmentId)
	if err != nil {
		return nil, err
	}
	return ParseStreamResponse(rsp)
}

// ParseAuthenticateResponse parses an HTTP response from a AuthenticateWithResponse call
func ParseAuthenticateResponse(rsp *http.Response) (*AuthenticateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AuthenticateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthenticationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetFeatureConfigResponse parses an HTTP response from a GetFeatureConfigWithResponse call
func ParseGetFeatureConfigResponse(rsp *http.Response) (*GetFeatureConfigResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetFeatureConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FeatureConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetFeatureConfigByIdentifierResponse parses an HTTP response from a GetFeatureConfigByIdentifierWithResponse call
func ParseGetFeatureConfigByIdentifierResponse(rsp *http.Response) (*GetFeatureConfigByIdentifierResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetFeatureConfigByIdentifierResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FeatureConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllSegmentsResponse parses an HTTP response from a GetAllSegmentsWithResponse call
func ParseGetAllSegmentsResponse(rsp *http.Response) (*GetAllSegmentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAllSegmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Segment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetEvaluationsResponse parses an HTTP response from a GetEvaluationsWithResponse call
func ParseGetEvaluationsResponse(rsp *http.Response) (*GetEvaluationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetEvaluationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/Pagination)
			Pagination
			// Embedded struct due to allOf(#/components/schemas/Evaluations)
			Evaluations
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEvaluationByIdentifierResponse parses an HTTP response from a GetEvaluationByIdentifierWithResponse call
func ParseGetEvaluationByIdentifierResponse(rsp *http.Response) (*GetEvaluationByIdentifierResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetEvaluationByIdentifierResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Evaluation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseStreamResponse parses an HTTP response from a StreamWithResponse call
func ParseStreamResponse(rsp *http.Response) (*StreamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &StreamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

// Package restapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package restapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Check the value of a flag
	// (POST /check_flag)
	GetFlagValue(ctx echo.Context) error
	// Check the system is up
	// (GET /ping)
	Ping(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetFlagValue converts echo context to params.
func (w *ServerInterfaceWrapper) GetFlagValue(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFlagValue(ctx)
	return err
}

// Ping converts echo context to params.
func (w *ServerInterfaceWrapper) Ping(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Ping(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/check_flag", wrapper.GetFlagValue)
	router.GET(baseURL+"/ping", wrapper.Ping)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xUS2/bPBD8K8R+31G1nAa96JQ+4jbNoUHSxyEIgg21kphIJENSdo3A/73gynYsyS18",
	"SC+9SeQ+hjM7+wTSNNZo0sFD9gReVtQgf546Z9wleWu0p3iQk5dO2aCMhqy7FlcBQ+tFYZxYOLSWHCRg",
	"nbHkgiKuQzHwtiHvseQ6YWkJMvDBKV3CapWAo8dWOcohux6E3ySbcHN3TzLAKoFZjeX7iuTDO5Mvx8Au",
	"6bElH0QwQsYoUdRYCqXF1YfzEbh4d/tAXIZ+YmPr2KtZ3m4vkiHeZJ2kdN7PuvdG7wsP6EoKMXZATIOq",
	"HpRATSfr34k0zb5yGhvqZ31GTfsiHZVMyW7saRsxjKNXI6IHuuwQ8vz+P8rz+9nZ3ESNWJ1OqAM02q/F",
	"HOv2gNEaPqFL2/eGC6PLw+BfxEZDxNbocgfOnTE1oR7h4bBx+ximdGFiBWl0QBl2xgVkcVKh0+T9RBnY",
	"zAPMCEPrSET6xSuR05zqiMlDAq2LiVUI1mdpulgsJjsVovIq8HB86k6jCuJr9NCPztPi7cUZJDAn5zsG",
	"jibTyTRmGksarYIMjvkoAYuhYhJSFpWN1HHi+RkRE0Yiz3LI4COFCPg7K9GxQz5sjB1fT5rT0NpaSU5M",
	"2WjbZRW//ndUQAb/pc/bLF2vsrS/LlZ9EYJriQ86RRn46+n05Ztvp4kB9Ofpy3mk8s0Ltu3v7j0tOaDr",
	"ejwe8CtycyVJfNM4R1XjXU08vL5tGnRLyIDfJEJFgk0kTCGQrcxxqVWdAdZ7r6/52jJ/jfOeef81uv3S",
	"B2qE8qK1XSdPLhoTsuthXW1EZXwQ3pJUhaJ8uwpStCo9YgsPk2aznvX76yNL09pIrGPZ7Hg6PXoudLP6",
	"FQAA//9wj1yyTAgAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

